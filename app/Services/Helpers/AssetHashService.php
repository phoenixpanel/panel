<?php

namespace PhoenixPanel\Services\Helpers;

use Illuminate\Support\Arr;
use Illuminate\Filesystem\FilesystemManager;
use Illuminate\Contracts\Filesystem\Filesystem;

class AssetHashService
{
    /**
     * Location of the manifest file generated by gulp.
     */
    public const MANIFEST_PATH = './assets/manifest.json';

    /**
     * @var \Illuminate\Contracts\Filesystem\Filesystem
     */
    private Filesystem $filesystem;

    /**
     * @var array|null
     */
    protected static ?array $manifest = null;

    /**
     * AssetHashService constructor.
     */
    public function __construct(FilesystemManager $filesystem)
    {
        $this->filesystem = $filesystem->createLocalDriver(['root' => public_path()]);
    }

    /**
     * Modify a URL to append the asset hash.
     */
    public function url(string $resource): string
    {
        $file = last(explode('/', $resource));
        $manifest = $this->getManifest();
        
        if (!isset($manifest[$file])) {
            return $resource;
        }
        
        return str_replace($file, $manifest[$file]['src'] ?? $file, $resource);
    }

    /**
     * Return the data integrity hash for a resource.
     */
    public function integrity(string $resource): string
    {
        $file = last(explode('/', $resource));
        $manifest = $this->getManifest();
        
        if (!isset($manifest[$file])) {
            return '';
        }
        
        return $manifest[$file]['integrity'] ?? '';
    }

    /**
     * Return a built CSS import using the provided URL.
     */
    public function css(string $resource): string
    {
        $attributes = [
            'href' => $this->url($resource),
            'rel' => 'stylesheet preload',
            'as' => 'style',
            'crossorigin' => 'anonymous',
            'referrerpolicy' => 'no-referrer',
        ];

        if (config('phoenixpanel.assets.use_hash')) {
            $attributes['integrity'] = $this->integrity($resource);
        }

        $output = '<link';
        foreach ($attributes as $key => $value) {
            $output .= " $key=\"$value\"";
        }

        return $output . '>';
    }

    /**
     * Return a built JS import using the provided URL.
     */
    public function js(string $resource): string
    {
        $attributes = [
            'src' => $this->url($resource),
            'crossorigin' => 'anonymous',
        ];

        if (config('phoenixpanel.assets.use_hash')) {
            $attributes['integrity'] = $this->integrity($resource);
        }

        $output = '<script';
        foreach ($attributes as $key => $value) {
            $output .= " $key=\"$value\"";
        }

        return $output . '></script>';
    }

    /**
     * Get the asset manifest and store it in the cache for quicker lookups.
     */
    protected function getManifest(): array
    {
        if (static::$manifest !== null) {
            return static::$manifest;
        }
        
        try {
            if (!$this->filesystem->exists(self::MANIFEST_PATH)) {
                return static::$manifest = [];
            }
            
            $contents = $this->filesystem->get(self::MANIFEST_PATH);
            if (empty($contents)) {
                return static::$manifest = [];
            }
            
            $decoded = json_decode($contents, true);
            if (json_last_error() !== JSON_ERROR_NONE || !is_array($decoded)) {
                return static::$manifest = [];
            }
            
            return static::$manifest = $decoded;
        } catch (\Exception $exception) {
            return static::$manifest = [];
        }
    }
}

