<?php

namespace PhoenixPanel\Services\Helpers;

use Illuminate\Support\Arr;
use Illuminate\Filesystem\FilesystemManager;
use Illuminate\Contracts\Filesystem\Filesystem;
use PhoenixPanel\Exceptions\ManifestDoesNotExistException;

class AssetHashService
{
    /**
     * Location of the manifest file generated by gulp.
     */
    public const MANIFEST_PATH = './assets/manifest.json';

    private Filesystem $filesystem;

    protected static mixed $manifest = null;

    /**
     * AssetHashService constructor.
     */
    public function __construct(FilesystemManager $filesystem)
    {
        $this->filesystem = $filesystem->createLocalDriver(['root' => public_path()]);
    }

    /**
     * Modify a URL to append the asset hash.
     */
    public function url(string $resource): string
    {
        // If the resource already starts with a slash or http, it's already a valid URL
        if (starts_with($resource, '/') || starts_with($resource, 'http')) {
            return $resource;
        }
        
        $file = last(explode('/', $resource));
        $manifest = $this->manifest();
        
        // If manifest is empty or doesn't contain the file, prepend a slash to make it a valid URL
        if (empty($manifest) || !isset($manifest[$file])) {
            return '/' . $resource;
        }
        
        $data = Arr::get($manifest, $file) ?? $file;
        $result = str_replace($file, Arr::get($data, 'src') ?? $file, $resource);
        
        // Ensure the result starts with a slash
        if (!starts_with($result, '/') && !starts_with($result, 'http')) {
            $result = '/' . $result;
        }
        
        return $result;
    }

    /**
     * Return the data integrity hash for a resource.
     */
    public function integrity(string $resource): string
    {
        $file = last(explode('/', $resource));
        $manifest = $this->manifest();
        
        // If manifest is empty or doesn't contain the file, return empty string
        if (empty($manifest) || !isset($manifest[$file])) {
            return '';
        }
        
        $data = array_get($manifest, $file, $file);
        return Arr::get($data, 'integrity') ?? '';
    }

    /**
     * Return a built CSS import using the provided URL.
     */
    public function css(string $resource): string
    {
        $attributes = [
            'href' => $this->url($resource),
            'rel' => 'stylesheet preload',
            'as' => 'style',
            'crossorigin' => 'anonymous',
            'referrerpolicy' => 'no-referrer',
        ];

        // Only add integrity if we have a valid hash and it's enabled in config
        if (config('phoenixpanel.assets.use_hash')) {
            $integrity = $this->integrity($resource);
            if (!empty($integrity)) {
                $attributes['integrity'] = $integrity;
            }
        }

        $output = '<link';
        foreach ($attributes as $key => $value) {
            $output .= " $key=\"$value\"";
        }

        return $output . '>';
    }

    /**
     * Return a built JS import using the provided URL.
     */
    public function js(string $resource): string
    {
        $attributes = [
            'src' => $this->url($resource),
            'crossorigin' => 'anonymous',
        ];

        // Only add integrity if we have a valid hash and it's enabled in config
        if (config('phoenixpanel.assets.use_hash')) {
            $integrity = $this->integrity($resource);
            if (!empty($integrity)) {
                $attributes['integrity'] = $integrity;
            }
        }

        $output = '<script';
        foreach ($attributes as $key => $value) {
            $output .= " $key=\"$value\"";
        }

        return $output . '></script>';
    }

    /**
     * Get the asset manifest and store it in the cache for quicker lookups.
     */
    protected function manifest(): array
    {
        if (static::$manifest === null) {
            try {
                if ($this->filesystem->exists(self::MANIFEST_PATH)) {
                    $content = $this->filesystem->get(self::MANIFEST_PATH);
                    self::$manifest = json_decode($content, true) ?? [];
                    
                    // If json_decode returns null (invalid JSON), use an empty array
                    if (self::$manifest === null) {
                        self::$manifest = [];
                    }
                } else {
                    // File doesn't exist
                    self::$manifest = [];
                    
                    // Only throw in development
                    if (!app()->environment('production')) {
                        throw new ManifestDoesNotExistException();
                    }
                }
            } catch (\Exception $e) {
                // Catch any other exceptions
                self::$manifest = [];
                
                // Only throw in development
                if (!app()->environment('production') && !($e instanceof ManifestDoesNotExistException)) {
                    throw $e;
                }
            }
        }

        return static::$manifest ?? [];
    }
}


